<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  exclude-result-prefixes="xs"
  version="3.0">

  <xsl:param name="strip-generated" select="'document'">
    <!-- document, element, all, none
         Strip parts of IDs generated by Saxon (d42e204 and the like) -->
  </xsl:param>

  <xsl:template match="@href[starts-with(., '#')] | *:custom-meta[*:meta-name = ('source-dir-uri', 'archive-dir-uri')]/*:meta-value | 
           *:meta[@name = ('source-dir-uri')]/@content | *:meta[@property='dcterms:modified'] | @srcpath | *:zipfile/@size | @compressed-size | @size |
           @date | @last-modified | *:date| @tr-generated-id | @tr-split-for
           | @source-dir-uri | @specific-use | (:@Self |:) @annotations | @potentially-relative | @alt">
    <!-- some of these might be subjected to other normalization templates instead of being removed -->
  </xsl:template>

  <xsl:template match="@xml:base | @href | @target-filename | @local-href | @xml:base |
                       @target-dir | @epub-local-path | @htmlroot-uri-regex | @src | @href |
                       @base-url | @xlink:href | *:cover/@href | @fileref | @*:image-path |
                       @LinkResourceURI"  
                priority="1"
                name="file-uri-normalization">
    <xsl:variable name="next-match" as="xs:string">
      <xsl:next-match/>
    </xsl:variable>
    <xsl:attribute name="{name()}" select="let $try := replace($next-match, '^.+\.tmp/+', '') 
                                           return if ($try = string(current()))
                                           then replace($next-match, '^.*/', '')
                                           else $try"/>
  </xsl:template>
  
  <xsl:template match="@*[local-name() = ('id', 'about-idrefs', 'refid', 'rid')][matches(., '^(calstable_)?(\p{L}+[-_])?(d\d+e\d+\s*)+$')]  |
                       @ParentStory | @Self | @StoryList | @xml:base"
                name="generated-id-normalization">
    <xsl:attribute name="{name()}" separator=" "
      select="if ($strip-generated = 'none')
              then .
              else (
                    tokenize(., '\s+') ! (if ($strip-generated = 'document')
                                          then replace(., '(d\d+)(e\d+)', 'dXY$2')
                                          else if ($strip-generated = 'element')
                                               then replace(., '(d\d+)(e\d+)', '$1eXY')
                                               else replace(., '(d\d+)(e\d+)', 'dXYeXY'))
                   )"></xsl:attribute>
  </xsl:template>

  <xsl:template match="*:content/@src | *:a/@href" priority="2"
                name="fragment-id-normalization">
    <xsl:attribute name="{name()}" select="replace(., '(.*)#.*', '$1')"/>
  </xsl:template>

  <xsl:template match="text()[matches(., '/test_(before|after)/')]">
    <xsl:value-of select="replace(., '(/.+)*/test_(before|after)/(.+/)*', '/test_before_test_after/')"/>
  </xsl:template>

  <xsl:template match="@* | node()">
    <xsl:copy><xsl:apply-templates select="@*, node()"/></xsl:copy>
  </xsl:template>

</xsl:stylesheet>